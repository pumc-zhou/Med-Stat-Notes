{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"01-SAS 安装与vscode 扩展\"\n",
        "author: \"Simon Zhou\"\n",
        "date: \"2025-03-11\"\n",
        "date-modified: \"2025-07-18\"\n",
        "format: \n",
        "    html:\n",
        "        code-fold: true\n",
        "        fig_caption: true\n",
        "        number-sections: true\n",
        "        toc: true\n",
        "        toc-depth: 2\n",
        "jupyter: python3\n",
        "execute:\n",
        "  echo: true      # 在输出中显示代码\n",
        "  eval: true      # 执行代码\n",
        "---\n",
        "\n",
        "\n",
        "# SAS 在各操作系统中的安装\n",
        "\n",
        "## SAS 在 Windows 系统中的安装\n",
        "\n",
        "\\[**SAS9.4下载安装教程**\\](<https://blog.csdn.net/wzk4869/article/details/128893187>)\n",
        "\n",
        "## SAS 在 Linux 系统中的安装\n",
        "\n",
        "\\[[**Linux 环境下 SAS 软件安装与配置详细教程**](https://my.oschina.net/emacs_8839324/blog/17390712)\\](<https://my.oschina.net/emacs_8839324/blog/17390712>)\n",
        "\n",
        "SAS 在 Linux 系统中的安装极为复杂，笔者曾在某短时间研究多日，最后还是没有安装成功。\n",
        "\n",
        "## SAS 在 macOS 中的安装\n",
        "\n",
        "在 macOS 中安装SAS一般有两种途径：\n",
        "\n",
        "1.  下载 SAS University Edition for mac（这个版本是免费版，目前还不了解哪些功能被阉割）\n",
        "2.  在 macOS 上搭建 Windows 虚拟机，然后按照 Windows上装 SAS 的方法进行。\n",
        "\n",
        "如果你有可用的 SID 可以考虑安装虚拟机后运行 SAS，如果没有可用的 SID，则考虑使用免费的 [免费使用 SAS 云软件](https://www.sas.com/zh_cn/software/on-demand-for-academics.html#osx-download)，需要按照身份和需求进行注册，最后登录 [SAS® OnDemand for Academics](https://welcome.oda.sas.com/)进行使用。\n",
        "\n",
        "## SAS 与 vscode 扩展\n",
        "\n",
        "SAS VS Code 扩展轻量级，可在任何地方运行，并允许您集成 SAS 和其他语言。该工具还提供直接连接到 SAS Viya 和 SAS 9 并运行代码的功能。\n",
        "\n",
        "-   SAS 语法突出显示和帮助、代码完成和代码片段\n",
        "-   用于连接 SAS 和运行代码的配置文件配置\n",
        "-   支持 SAS Viya 和 SAS 9 连接\n",
        "-   访问 SAS 内容和库\n",
        "-   为 SAS、SQL、Python 和其他语言创建笔记本\n",
        "\n",
        "扩展程序可在 GitHub 上找到仓库与原代码：\\[[vscode-sas-extension](https://github.com/sassoftware/vscode-sas-extension)\\](<https://github.com/sassoftware/vscode-sas-extension>)\n",
        "\n",
        "更多关于 SAS 与 vscode 的信息可以访问：\\[**SAS Extension for Visual Studio Code**\\](<https://developer.sas.com/programming/vs_code_extension>)\n",
        "\n",
        "### 安装插件\n",
        "\n",
        "在 vscode 的扩展页面搜索 “sas” ，第一个 “official SAS ···“ 即为正确扩展：\n",
        "\n",
        "![](images/SAS-extension.png)\n",
        "\n",
        "## 配置路径\n",
        "\n",
        "Before you can run SAS code, you must [configure the SAS extension](https://sassoftware.github.io/vscode-sas-extension/Configurations/ \"https://sassoftware.github.io/vscode-sas-extension/Configurations/\") to access your SAS 9.4 (remote or local) server or a SAS Viya server and [add a connection profile](https://sassoftware.github.io/vscode-sas-extension/Configurations/Profiles/ \"https://sassoftware.github.io/vscode-sas-extension/Configurations/Profiles/\").\n",
        "\n",
        "在运行 SAS 代码之前，您必须配置 SAS 扩展以访问 SAS 9.4（远程或本地）服务器或 SAS Viya 服务器。您必须获得 SAS 9.4 或 SAS Viya 的许可才能运行 SAS 代码。\n",
        "\n",
        "1.  打开 SAS 程序文件。\n",
        "2.  单击 VS Code 窗口左下方状态栏中的“无配置文件”。 您还可以打开命令面板（`F1`，或`Ctrl+Shift+P`在 Windows 或 Linux 上，或`Shift+CMD+P`在 OSX 上）并找到`SAS: Add New Connection Profile`命令。\n",
        "3.  [按照“添加新连接配置文件”](https://sassoftware.github.io/vscode-sas-extension/Configurations/Profiles/#add-new-connection-profile)部分中的说明添加配置文件。\n",
        "4.  创建配置文件后，状态栏项将从“无配置文件”更改为新配置文件的名称。\n",
        "\n",
        "![](images/paste-2.png)\n",
        "\n",
        "更多设置可以查看\\[[**SAS Extension for Visual Studio Code Documentation**](https://sassoftware.github.io/vscode-sas-extension/)\\]([https://sassoftware.github.io/vscode-sas-extension/Configurations/Profiles/sas9local](#0){style=\"font-size: 13pt; font-weight: var(--fontWeightRegular);\"})\n",
        "\n",
        "## 编译 SAS 文件\n",
        "\n",
        "SAS 文件右上角有一个 奔跑的小人 ，点击即可开始运行所选中的程序段落，并在右侧窗口输出结果。\n",
        "\n",
        "## 在 Jupyter Notebook 中使用 SAS\n",
        "\n",
        "### 环境准备\n",
        "\n",
        "1.  安装 Anaconda 集成环境或 Python 和 SAS 软件，其中要求Python3.4+；\n",
        "2.  SAS 需要 SAS 9.4+ 或 SAS Viya 3.1+；\n",
        "3.  Python在Jupyter Notebook和SAS之间起一个桥梁的作用，Jupyter Notebook中的SAS代码会交给Python，Python负责将代码传递给SAS执行；\n",
        "4.  然后将执行的结果返回给Jupyter Notebook显示。\n",
        "\n",
        "SAS版本要求9.4，也可以是 SAS Viya。\n",
        "\n",
        "### 通过 `pip` 安装 SASPY\n",
        "\n",
        "启动 `cmd`，输入命令：\n",
        "\n",
        "``` python\n",
        "pip install saspy\n",
        "```\n",
        "\n",
        "specific release：\n",
        "\n",
        "``` python\n",
        "pip install http://github.com/sassoftware/saspy/releases/saspy-X.X.X.tar.gz\n",
        "```\n",
        "\n",
        "然后就会自动安装 `saspy` 及其相应的依赖项。\n",
        "\n",
        "最好的更新或重装方式：\n",
        "\n",
        "``` python\n",
        "pip uninstall -y saspy\n",
        "pip install saspy\n",
        "```\n",
        "\n",
        "### 通过 `uv` 安装和管理\n",
        "\n",
        "``` python\n",
        "uv init name-of-project\n",
        "cd name-of-project\n",
        "uv add saspy # adds saspy to your project from PyPI\n",
        "```\n",
        "\n",
        "### 通过 `conda` 安装和管理\n",
        "\n",
        "``` python\n",
        "conda create --name name-of-my-environment\n",
        "conda install --channel conda-forge saspy # Installs latest version of saspy from conda-forge channel.\n",
        "conda install --channel conda-forge saspy==X.X.X # Where X.X.X is the version you'd like to install.\n",
        "```\n",
        "\n",
        "安装完成后可以输入命令：\n",
        "\n",
        "``` python\n",
        "jupyter kernelspec list\n",
        "```\n",
        "\n",
        "来检测 `saspy` 是否安装成功，如果成功，理论上会看到如下形式的输出：\n",
        "\n",
        "```         \n",
        "Available kernels:\n",
        "    python3    /home/sas/anaconda3/lib/python3.5/site-packages/ipykernel/resources\n",
        "    sas        /home/sas/.local/share/jupyter/kernels/sas\n",
        "```\n",
        "\n",
        "### 修改 Python 配置文件\n",
        "\n",
        "安装好 `saspy` 后找到 Anaconda 或 Python 的安装目录，会有一个相应的文件夹出现，例如我的文件路径如下：\n",
        "\n",
        "```         \n",
        "C:\\Users\\asus\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\saspy\n",
        "```\n",
        "\n",
        "在这个文件路径下找到 `sascfg.py` 文件，该文件中需要配置连接SAS的信息。可以配置连接本地机器的SAS；也可以配置连接远程机器的SAS Server，无论是Linux Server还是Windows Server都可以。此处就以连接本地SAS为例进行说明。\n",
        "\n",
        "1.  打开该文件，首先是一大段注释；\n",
        "2.  在这段注释后定义的第一个变量 `SAS_config_names` 用于指定连接SAS的配置方式，提供了 10 种方式：`default`, `ssh`, `iomlinux`, `iomwin`, `winlocal`, `winiomlinux`, `winiomwin`, `httpsviya`, `httpviya`, `iomcom`。默认为 `default` 方式。\n",
        "3.  因为我们需要连接Windows机器本地的SAS，所以需要将 `SAS_config_names` 的值修改为 `winlocal` 。\n",
        "\n",
        "![](images/paste-1.png)\n",
        "\n",
        "**`sascfg.py` 的内容（2025年版配置文件）**\n",
        "\n",
        "``` python\n",
        "#\n",
        "# Copyright SAS Institute\n",
        "#\n",
        "#  Licensed under the Apache License, Version 2.0 (the License);\n",
        "#  you may not use this file except in compliance with the License.\n",
        "#  You may obtain a copy of the License at\n",
        "#\n",
        "#      http://www.apache.org/licenses/LICENSE-2.0\n",
        "#\n",
        "#  Unless required by applicable law or agreed to in writing, software\n",
        "#  distributed under the License is distributed on an \"AS IS\" BASIS,\n",
        "#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
        "#  See the License for the specific language governing permissions and\n",
        "#  limitations under the License.\n",
        "#\n",
        "\n",
        "# THIS IS AN EXAMPLE CONFIG FILE. PLEASE CREATE YOUR OWN sascfg_personal.py FILE USING THE APPROPRIATE TEMPLATES FROM BELOW\n",
        "# SEE THE CONFIGURATION DOC AT https://sassoftware.github.io/saspy/install.html#configuration\n",
        "\n",
        "\n",
        "# Configuration Names for SAS - python List\n",
        "# This is the list of allowed configuration definitions that can be used. The definition are defined below.\n",
        "# if there is more than one name in the list, and cfgname= is not specified in SASsession(), then the user\n",
        "# will be prompted to choose which configuration to use.\n",
        "#\n",
        "# The various options for the different access methods can be specified on the SASsession() i.e.:\n",
        "# sas = SASsession(cfgname='default', options='-fullstimer', user='me')\n",
        "#\n",
        "# Based upon the lock_down configuration option below, you may or may not be able to override option\n",
        "# that are defined already. Any necessary option (like user, pw for IOM or HTTP) that are not defined will be\n",
        "# prompted for at run time. To dissallow overrides of as OPTION, when you don't have a value, simply\n",
        "# specify options=''. This way it's specified so it can't be overridden, even though you don't have any\n",
        "# specific value you want applied.\n",
        "#\n",
        "#SAS_config_names = ['default', 'ssh', 'iomlinux', 'iomwin', 'winlocal', 'winiomlinux', 'winiomwin', 'httpsviya', 'httpviya', 'iomcom']\n",
        "#\n",
        "\n",
        "SAS_config_names=['winlocal']\n",
        "\n",
        "\n",
        "\n",
        "# Configuration options for saspy - python Dict   # not required unless changing any of the defaults\n",
        "# valid key are:\n",
        "#\n",
        "# 'lock_down' - True | False. True = Prevent runtime overrides of SAS_Config values below\n",
        "#\n",
        "# 'verbose'   - True | False. True = Allow print statements for debug type messages\n",
        "#\n",
        "# 'prompt'    - True | False. True = Allow prompting as necessary\n",
        "#\n",
        "SAS_config_options = {'lock_down': False,\n",
        "                      'verbose'  : True,\n",
        "                      'prompt'   : True\n",
        "                     }\n",
        "\n",
        "\n",
        "\n",
        "# Configuration options for SAS output. By default output is HTML 5.0 (using \"ods html5\" statement) but certain templates might not work\n",
        "# properly with HTML 5.0 so it can also be set to HTML 4.0 instead (using \"ods html\" statement). This option will only work when using IOM\n",
        "# in local mode. Note that HTML 4.0 will generate images separately which clutters the workspace and if you download the notebook as HTML,\n",
        "# the HTML file will need to be put in the same folder as the images for them to appear.\n",
        "# valid keys are:\n",
        "#\n",
        "# 'output' = ['html5', 'html']\n",
        "# 'style'  = any valid style   # this will be the default for SASsession.HTML_Style, which you can also change dynamically in your code\n",
        "#\n",
        "#\n",
        "SAS_output_options = {'output' : 'html5',       # not required unless changing any of the default\n",
        "                      'style'  : 'HTMLBlue'}\n",
        "\n",
        "\n",
        "# Configuration Definitions\n",
        "#\n",
        "# For STDIO and STDIO over SSH access methods\n",
        "# These need path to SASHome and optional startup options - python Dict\n",
        "# The default path to the sas start up script is: /opt/sasinside/SASHome/SASFoundation/9.4/sas\n",
        "# A usual install path is: /opt/sasinside/SASHome\n",
        "#\n",
        "# The encoding is figured out by saspy. You don't need to specify it, unless you just want to get rid of the message about which encoding was determined.\n",
        "#\n",
        "# valid keys are:\n",
        "# 'saspath'  - [REQUIRED] path to SAS startup script i.e.: /opt/sasinside/SASHome/SASFoundation/9.4/sas\n",
        "# 'options'  - SAS options to include in the start up command line - Python List\n",
        "# 'encoding' - This is the python encoding value that matches the SAS session encoding your SAS session is using\n",
        "#\n",
        "# For passwordless ssh connection, the following are also reuqired:\n",
        "# 'ssh'     - [REQUIRED] the ssh command to run\n",
        "# 'host'    - [REQUIRED] the host to connect to\n",
        "#\n",
        "# Additional valid keys for ssh:\n",
        "# 'port'    - [integer] the remote ssh port\n",
        "# 'tunnel'  - [integer] local port to open via reverse tunnel, if remote host cannot otherwise reach this client\n",
        "#\n",
        "default  = {'saspath'  : 'C:/Program Files/SASHome/SASFoundation/9.4/sas.exe'\n",
        "            }\n",
        "\n",
        "winlocal = {\n",
        "    'saspath': 'C:\\\\Program Files\\\\SASHome\\\\SASFoundation\\\\9.4\\\\sas.exe'\n",
        "}\n",
        "\n",
        "# If you installed SAS by default path,the above path maybe effect for your Windows.\n",
        "\n",
        "ssh      = {'saspath' : '/opt/sasinside/SASHome/SASFoundation/9.4/bin/sas_en',\n",
        "            'ssh'     : '/usr/bin/ssh',\n",
        "            'host'    : 'remote.linux.host',\n",
        "            'encoding': 'latin1',\n",
        "            'options' : [\"-fullstimer\"]\n",
        "            }\n",
        "\n",
        "\n",
        "# For IOM (Grid Manager or any IOM) and Local Windows via IOM access method\n",
        "# These configuration definitions are for connecting over IOM. This is designed to be used to connect to any Workspace server, including SAS Grid, via Grid Manager\n",
        "# and also to connect to a local Windows SAS session. The client side (python and java) for this access method can be either Linux or Windows.\n",
        "# The STDIO access method above is only for Linux. PC SAS requires this IOM interface.\n",
        "#\n",
        "# The absence of the iomhost option triggers local Windows SAS mode. In this case none of 'iomhost', 'iomport', 'omruser', 'omrpw' are needed.\n",
        "# a local SAS session is started up and connected to.\n",
        "#\n",
        "# The encoding is figured out by saspy. You don't need to specify it, unless you just want to get rid of the message about which encoding was determined.\n",
        "\n",
        "# NONE OF THE PATHS IN THESE EAMPLES ARE RIGHT FOR YOUT INSTALL. YOU HAVE TO CHANGE THE PATHS TO BE CORRECT FOR YOUR INSTALLATION\n",
        "#\n",
        "# valid keys are:\n",
        "# 'java'      - [REQUIRED] the path to the java executable to use\n",
        "# 'iomhost'   - [REQUIRED for remote IOM case, Don't specify to use a local Windows Session] the resolvable host name, or ip to the IOM server to connect to\n",
        "# 'iomport'   - [REQUIRED for remote IOM case, Don't specify to use a local Windows Session] the port IOM is listening on\n",
        "# 'authkey'   - identifier for user/password credentials to read from .authinfo file. Eliminates prompting for credentials.\n",
        "# 'omruser'   - not suggested        [REQUIRED for remote IOM case but PROMPTED for at runtime] Don't specify to use a local Windows Session\n",
        "# 'omrpw'     - really not suggested [REQUIRED for remote IOM case but PROMPTED for at runtime] Don't specify to use a local Windows Session\n",
        "# 'encoding'  - This is the python encoding value that matches the SAS session encoding of the IOM server you are connecting to\n",
        "# 'appserver' - name of physical workspace server (when more than one app server defined in OMR) i.e.: 'SASApp - Workspace Server'\n",
        "# 'sspi'      - boolean. use IWA instead of user/pw to connect to the IOM workspace server\n",
        "\n",
        "\n",
        "iomlinux = {'java'      : '/usr/bin/java',\n",
        "            'iomhost'   : 'linux.iom.host',\n",
        "            'iomport'   : 8591,\n",
        "            }\n",
        "\n",
        "iomwin   = {'java'      : '/usr/bin/java',\n",
        "            'iomhost'   : 'windows.iom.host',\n",
        "            'iomport'   : 8591,\n",
        "            }\n",
        "\n",
        "winlocal = {'java'      : 'java',\n",
        "            'encoding'  : 'EUC-CN',\n",
        "            }\n",
        "\n",
        "winiomlinux = {'java'   : 'java',\n",
        "            'iomhost'   : 'linux.iom.host',\n",
        "            'iomport'   : 8591,\n",
        "            }\n",
        "\n",
        "winiomwin  = {'java'    : 'java',\n",
        "            'iomhost'   : 'windows.iom.host',\n",
        "            'iomport'   : 8591,\n",
        "            }\n",
        "\n",
        "winiomIWA  = {'java'    : 'java',\n",
        "            'iomhost'   : 'windows.iom.host',\n",
        "            'iomport'   : 8591,\n",
        "            'sspi'      : True\n",
        "            }\n",
        "\n",
        "\n",
        "# For Remote and Local IOM access methods using COM interface\n",
        "# These configuration definitions are for connecting over IOM using COM. This\n",
        "# access method is for Windows clients connecting to remote hosts. Local\n",
        "# SAS instances may also be supported.\n",
        "#\n",
        "# This access method does not require a Java dependency.\n",
        "#\n",
        "# Valid Keys:\n",
        "#   iomhost     - Required for remote connections only. The Resolvable SAS\n",
        "#                 server dns name.\n",
        "#   iomport     - Required for remote connections only. The SAS workspace\n",
        "#                 server port. Generally 8591 on standard remote\n",
        "#                 installations. For local connections, 0 is the default.\n",
        "#   class_id    - Required for remote connections only. The IOM workspace\n",
        "#                 server class identifier. Use `PROC IOMOPERATE` to identify\n",
        "#                 the correct value. This option is ignored on local connections.\n",
        "#   provider    - [REQUIRED] IOM provider. \"sas.iomprovider\" is recommended.\n",
        "#   encoding    - This is the python encoding value that matches the SAS\n",
        "#                 session encoding of the IOM server.\n",
        "#   omruser     - SAS user. This option is ignored on local connections.\n",
        "#   omrpw       - SAS password. This option is ignored on local connections.\n",
        "#   authkey     - Identifier for credentials to read from .authinfo file.\n",
        "\n",
        "iomcom = {\n",
        "    'iomhost' : 'mynode.mycompany.org',\n",
        "    'iomport' : 8591,\n",
        "    'provider': 'sas.iomprovider',\n",
        "    'encoding': 'windows-1252'}\n",
        "\n",
        "\n",
        "# HTTP access method to connect to the Compute Service\n",
        "# These need ip addr, other values will be prompted for - python Dict\n",
        "# valid keys are:\n",
        "# 'url'     - (Required if ip not specified) The URL to Viya, of the form \"http[s]://host.idenifier[:port]\".\n",
        "#             When this is specified, ip= will not be used, as the host's ip is retrieved from the url. Also, ssl= is\n",
        "#             set based upon http or https and port= is also parsed from the url, if provided, else defaulted based\n",
        "#             upon the derived ssl= value. So neither ip, port nor ssl are needed when url= is used.\n",
        "# 'ip'      - (Required if url not specified) The resolvable host name, or IP address to the Viya Compute Service\n",
        "# 'port'    - port; the code Defaults this to based upon the 'ssl' key; 443 default else 80\n",
        "# 'ssl'     - whether to use HTTPS or just HTTP protocal. Default is True, using ssl and poort 443\n",
        "# 'context' - context name defined on the compute service  [PROMTED for at runtime if more than one defined]\n",
        "# 'authkey' - identifier for user/password credentials to read from .authinfo file. Eliminates prompting for credentials.\n",
        "# 'options' - SAS options to include (no '-' (dashes), just option names and values)\n",
        "# 'user'    - not suggested [REQUIRED but PROMTED for at runtime]\n",
        "# 'pw'      - really not suggested [REQUIRED but PROMTED for at runtime]\n",
        "#\n",
        "#\n",
        "\n",
        "httpsviya = {'url'     : 'https://viya.deployment.com',\n",
        "             'context' : 'SAS Studio compute context',\n",
        "             'authkey' : 'viya_user-pw',\n",
        "             'options' : [\"fullstimer\", \"memsize=1G\"]\n",
        "             }\n",
        "\n",
        "httpviya = {'url'     : 'https://sastpw.rndk8s.openstack.sas.com:23456',\n",
        "           #'port'    :  23456,   # can put different port here or ^ if it's not using the default port\n",
        "            'context' : 'SAS Studio compute context',\n",
        "            'authkey' : 'viya_user-pw',\n",
        "            'options' : [\"fullstimer\", \"memsize=1G\"]\n",
        "            }\n",
        "```\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### 示例配置文件\n",
        "\n",
        "这是一个示例配置文件。请使用下面的相应模板创建您自己的 **sascfg_personal.py** 文件。有关配置的详细信息，请参阅以下文档：<https://sassoftware.github.io/saspy/install.html#configuration>\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### SAS 的配置名称 - Python List\n",
        "\n",
        "这是允许使用的配置定义列表。定义如下所示。如果列表中有多个名称，并且在 `SASsession()` 中未指定 `cfgname=`，则系统将提示用户选择要使用的配置。\n",
        "\n",
        "`SASsession()` 中可以指定不同访问方法的各种选项，例如： `sas = SASsession(cfgname='default', options='-fullstimer', user='me')`\n",
        "\n",
        "根据下面的 `lock_down` 配置选项，您可能能够或不能够覆盖已定义的选项。任何必要但未定义的选项（如 IOM 或 HTTP 的 `user`、`pw`）将在运行时提示输入。要禁止覆盖作为 `OPTION` 的选项（当您没有值时），只需指定 `options=''`。这样它就被指定了，即使您没有要应用的特定值，也无法被覆盖。\n",
        "\n",
        "``` python\n",
        "#SAS_config_names = ['default', 'ssh', 'iomlinux', 'iomwin', 'winlocal', 'winiomlinux', 'winiomwin', 'httpsviya', 'httpviya', 'iomcom']\n",
        "\n",
        "SAS_config_names=['winlocal']\n",
        "```\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### Saspy 的配置选项 - Python Dict\n",
        "\n",
        "这些选项不是必需的，除非您需要更改任何默认值。有效的键包括：\n",
        "\n",
        "-   **'lock_down'**: `True` \\| `False`。设置为 `True` 可防止在运行时覆盖下面的 `SAS_Config` 值。\n",
        "-   **'verbose'**: `True` \\| `False`。设置为 `True` 可允许打印调试类型的消息。\n",
        "-   **'prompt'**: `True` \\| `False`。设置为 `True` 可在必要时允许提示。\n",
        "\n",
        "<!-- end list -->\n",
        "\n",
        "``` python\n",
        "SAS_config_options = {'lock_down': False,\n",
        "                      'verbose'  : True,\n",
        "                      'prompt'   : True\n",
        "                     }\n",
        "```\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### SAS 输出配置选项\n",
        "\n",
        "SAS 输出默认为 HTML 5.0（使用 \"ods html5\" 语句），但某些模板可能无法与 HTML 5.0 正常工作，因此也可以将其设置为 HTML 4.0（使用 \"ods html\" 语句）。此选项仅在使用 IOM 本地模式时有效。请注意，HTML 4.0 会单独生成图像，这会使工作区变得杂乱；如果您将笔记本下载为 HTML，HTML 文件需要与图像放在同一文件夹中才能显示图像。\n",
        "\n",
        "有效的键包括：\n",
        "\n",
        "-   **'output'**: `['html5', 'html']`\n",
        "-   **'style'**: 任何有效的样式。这将是 `SASsession.HTML_Style` 的默认值，您也可以在代码中动态更改它。\n",
        "\n",
        "<!-- end list -->\n",
        "\n",
        "``` python\n",
        "SAS_output_options = {'output' : 'html5',       # not required unless changing any of the default\n",
        "                      'style'  : 'HTMLBlue'}\n",
        "```\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "### 配置定义\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "#### 针对 STDIO 和 SSH 上的 STDIO 访问方法\n",
        "\n",
        "这些需要 SASHome 的路径和可选的启动选项——Python 字典。 SAS 启动脚本的默认路径是：`/opt/sasinside/SASHome/SASFoundation/9.4/sas` 常见的安装路径是：`/opt/sasinside/SASHome`\n",
        "\n",
        "编码由 saspy 自动识别。您不需要指定它，除非您想消除有关确定编码的消息。\n",
        "\n",
        "有效的键包括：\n",
        "\n",
        "-   **'saspath'**: \\[必需\\] SAS 启动脚本的路径，例如：`/opt/sasinside/SASHome/SASFoundation/9.4/sas`\n",
        "-   **'options'**: 要包含在启动命令行中的 SAS 选项 - Python 列表\n",
        "-   **'encoding'**: 与您的 SAS 会话使用的 SAS 会话编码匹配的 Python 编码值\n",
        "\n",
        "对于无密码 SSH 连接，还需要以下项：\n",
        "\n",
        "-   **'ssh'**: \\[必需\\] 要运行的 ssh 命令\n",
        "-   **'host'**: \\[必需\\] 要连接的主机\n",
        "\n",
        "SSH 的其他有效键包括：\n",
        "\n",
        "-   **'port'**: \\[整数\\] 远程 SSH 端口\n",
        "-   **'tunnel'**: \\[整数\\] 如果远程主机无法连接此客户端，则通过反向隧道打开的本地端口\n",
        "\n",
        "<!-- end list -->\n",
        "\n",
        "``` python\n",
        "default  = {'saspath'  : 'C:/Program Files/SASHome/SASFoundation/9.4/sas.exe'\n",
        "            }\n",
        "\n",
        "winlocal = {\n",
        "    'saspath': 'C:\\\\Program Files\\\\SASHome\\\\SASFoundation\\\\9.4\\\\sas.exe'\n",
        "}\n",
        "\n",
        "# If you installed SAS by default path,the above path maybe effect for your Windows.\n",
        "\n",
        "ssh      = {'saspath' : '/opt/sasinside/SASHome/SASFoundation/9.4/bin/sas_en',\n",
        "            'ssh'     : '/usr/bin/ssh',\n",
        "            'host'    : 'remote.linux.host',\n",
        "            'encoding': 'latin1',\n",
        "            'options' : [\"-fullstimer\"]\n",
        "            }\n",
        "```\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "#### 针对 IOM（Grid Manager 或任何 IOM）和通过 IOM 的本地 Windows 访问方法\n",
        "\n",
        "这些配置定义用于通过 IOM 进行连接。这旨在用于连接到任何工作区服务器，包括 SAS Grid（通过 Grid Manager），以及连接到本地 Windows SAS 会话。此访问方法的客户端（Python 和 Java）可以是 Linux 或 Windows。上面提到的 STDIO 访问方法仅适用于 Linux。PC SAS 需要此 IOM 接口。\n",
        "\n",
        "缺少 `iomhost` 选项会触发本地 Windows SAS 模式。在这种情况下，不需要 `iomhost`、`iomport`、`omruser`、`omrpw` 中的任何一个。系统会启动并连接到本地 SAS 会话。\n",
        "\n",
        "编码由 saspy 自动识别。您不需要指定它，除非您想消除有关确定编码的消息。\n",
        "\n",
        "**这些示例中的所有路径都不适合您的安装。您必须更改路径以使其与您的安装相符。**\n",
        "\n",
        "有效的键包括：\n",
        "\n",
        "-   **'java'**: \\[必需\\] 要使用的 Java 可执行文件的路径\n",
        "-   **'iomhost'**: \\[远程 IOM 情况必需，不指定则使用本地 Windows 会话\\] 要连接的 IOM 服务器的可解析主机名或 IP\n",
        "-   **'iomport'**: \\[远程 IOM 情况必需，不指定则使用本地 Windows 会话\\] IOM 正在监听的端口\n",
        "-   **'authkey'**: 用于从 `.authinfo` 文件读取用户/密码凭据的标识符。消除了凭据提示。\n",
        "-   **'omruser'**: 不建议使用 \\[远程 IOM 情况必需，但在运行时提示输入\\] 不指定则使用本地 Windows 会话\n",
        "-   **'omrpw'**: 强烈不建议使用 \\[远程 IOM 情况必需，但在运行时提示输入\\] 不指定则使用本地 Windows 会话\n",
        "-   **'encoding'**: 与您要连接的 IOM 服务器的 SAS 会话编码匹配的 Python 编码值\n",
        "-   **'appserver'**: 物理工作区服务器的名称（当 OMR 中定义了多个应用程序服务器时），例如：'SASApp - Workspace Server'\n",
        "-   **'sspi'**: 布尔值。使用 IWA 而不是用户/密码连接到 IOM 工作区服务器\n",
        "\n",
        "<!-- end list -->\n",
        "\n",
        "``` python\n",
        "iomlinux = {'java'      : '/usr/bin/java',\n",
        "            'iomhost'   : 'linux.iom.host',\n",
        "            'iomport'   : 8591,\n",
        "            }\n",
        "\n",
        "iomwin   = {'java'      : '/usr/bin/java',\n",
        "            'iomhost'   : 'windows.iom.host',\n",
        "            'iomport'   : 8591,\n",
        "            }\n",
        "\n",
        "winlocal = {'java'      : 'java',\n",
        "            'encoding'  : 'EUC-CN',\n",
        "            }\n",
        "\n",
        "winiomlinux = {'java'   : 'java',\n",
        "            'iomhost'   : 'linux.iom.host',\n",
        "            'iomport'   : 8591,\n",
        "            }\n",
        "\n",
        "winiomwin  = {'java'    : 'java',\n",
        "            'iomhost'   : 'windows.iom.host',\n",
        "            'iomport'   : 8591,\n",
        "            }\n",
        "\n",
        "winiomIWA  = {'java'    : 'java',\n",
        "            'iomhost'   : 'windows.iom.host',\n",
        "            'iomport'   : 8591,\n",
        "            'sspi'      : True\n",
        "            }\n",
        "```\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "#### 针对使用 COM 接口的远程和本地 IOM 访问方法\n",
        "\n",
        "这些配置定义用于通过 COM 连接到 IOM。此访问方法适用于连接到远程主机的 Windows 客户端。本地 SAS 实例也可能受支持。\n",
        "\n",
        "此访问方法不需要 Java 依赖项。\n",
        "\n",
        "有效键：\n",
        "\n",
        "-   **iomhost**: 仅适用于远程连接。可解析的 SAS 服务器 DNS 名称。\n",
        "-   **iomport**: 仅适用于远程连接。SAS 工作区服务器端口。在标准远程安装中通常为 8591。对于本地连接，默认值为 0。\n",
        "-   **class_id**: 仅适用于远程连接。IOM 工作区服务器类标识符。使用 `PROC IOMOPERATE` 来识别正确的值。此选项在本地连接上被忽略。\n",
        "-   **provider**: \\[必需\\] IOM 提供程序。建议使用 \"sas.iomprovider\"。\n",
        "-   **encoding**: 与 IOM 服务器的 SAS 会话编码匹配的 Python 编码值。\n",
        "-   **omruser**: SAS 用户。此选项在本地连接上被忽略。\n",
        "-   **omrpw**: SAS 密码。此选项在本地连接上被忽略。\n",
        "-   **authkey**: 用于从 .authinfo 文件读取凭据的标识符。\n",
        "\n",
        "<!-- end list -->\n",
        "\n",
        "``` python\n",
        "iomcom = {\n",
        "    'iomhost' : 'mynode.mycompany.org',\n",
        "    'iomport' : 8591,\n",
        "    'provider': 'sas.iomprovider',\n",
        "    'encoding': 'windows-1252'}\n",
        "```\n",
        "\n",
        "------------------------------------------------------------------------\n",
        "\n",
        "#### 用于连接到计算服务的 HTTP 访问方法\n",
        "\n",
        "这些需要 IP 地址，其他值将在运行时提示输入 - Python Dict。\n",
        "\n",
        "有效键包括：\n",
        "\n",
        "-   **'url'**: （如果未指定 IP 则必需）Viya 的 URL，形式为 \"http\\[s\\]://host.identifier\\[:port\\]\"。当指定此项时，`ip=` 将不被使用，因为主机的 IP 是从 URL 中检索的。此外，`ssl=` 会根据 `http` 或 `https` 设置，并且 `port=` 也会从 URL 中解析（如果提供），否则会根据派生的 `ssl=` 值采用默认值。因此，当使用 `url=` 时，不需要 `ip`、`port` 或 `ssl`。\n",
        "-   **'ip'**: （如果未指定 URL 则必需）Viya 计算服务的可解析主机名或 IP 地址\n",
        "-   **'port'**: 端口；代码会根据 'ssl' 键将其默认为 443（如果使用 SSL）或 80（否则）\n",
        "-   **'ssl'**: 是否使用 HTTPS 或仅使用 HTTP 协议。默认为 `True`，使用 SSL 和端口 443。\n",
        "-   **'context'**: 在计算服务上定义的上下文名称 \\[如果定义了多个，则在运行时提示选择\\]\n",
        "-   **'authkey'**: 用于从 `.authinfo` 文件读取用户/密码凭据的标识符。消除了凭据提示。\n",
        "-   **'options'**: 要包含的 SAS 选项（不带 '-'（破折号），只有选项名称和值）\n",
        "-   **'user'**: 不建议使用 \\[必需，但在运行时提示输入\\]\n",
        "-   **'pw'**: 强烈不建议使用 \\[必需，但在运行时提示输入\\]\n",
        "\n",
        "<!-- end list -->\n",
        "\n",
        "``` python\n",
        "httpsviya = {'url'     : 'https://viya.deployment.com',\n",
        "             'context' : 'SAS Studio compute context',\n",
        "             'authkey' : 'viya_user-pw',\n",
        "             'options' : [\"fullstimer\", \"memsize=1G\"]\n",
        "             }\n",
        "\n",
        "httpviya = {'url'     : 'https://sastpw.rndk8s.openstack.sas.com:23456',\n",
        "           #'port'    :  23456,   # can put different port here or ^ if it's not using the default port\n",
        "            'context' : 'SAS Studio compute context',\n",
        "            'authkey' : 'viya_user-pw',\n",
        "            'options' : [\"fullstimer\", \"memsize=1G\"]\n",
        "            }\n",
        "```\n",
        "\n",
        "后续有一些安装步骤，但是大多是在2016-2020年更新的教程，无法找到复现的路径，可能相关的配置已被优化。\n",
        "\n",
        "包括这个 \\[**SAS岩论 \\| 在Jupyter Notebook中使用SAS** \\](<https://www.sohu.com/a/218339423_278472>) 中写到的需要使用 cpW 定义 SAS 路径。\n",
        "\n",
        "### 修改系统变量\n",
        "\n",
        "将sas相关文件 `sspiauth.dll` 添加到系统环境变量，该文件很可能在如下目录：\n",
        "\n",
        "``` bash\n",
        "C:\\Program Files\\SASHome\\SASFoundation\\9.4\\core\\sasext\n",
        "```\n",
        "\n",
        "（注意添加变量时不要包含 sspiauth.dll 文件本身）\n",
        "\n",
        "**Warning:** 环境变量添加完成后，要重启电脑才会生效。\n",
        "\n",
        "### 在 jupyter notebook 中使用 SAS\n",
        "\n",
        "新建文件，选择使用 SAS 内核，或者在 cell 中通过 magic command 指定内核。\n",
        "\n",
        "``` sas\n",
        "%%sas\n",
        "```\n",
        "\n",
        "使用语法如下所示：\n",
        "\n",
        "``` sas\n",
        "%%sas\n",
        "data iris;\n",
        "    set sashelp.iris;\n",
        "run;\n",
        "\n",
        "proc print data=iris(obs=10);\n",
        "run;\n",
        "```\n",
        "\n",
        "在Notebook中写SAS代码了，跟Python一样，同样有代码提示、语法高亮的功能。但是你会注意到过程步的结果显示了，运行的日志去哪里了？\n",
        "\n",
        "如果代码运行错误或者没有输出（例如纯DATA步）的话，那么输出就是日志信息。\n",
        "\n",
        "能够正确运行且有输出结果的代码就不会显示日志了。\n",
        "\n",
        "## 安装SAS日志组件\n",
        "\n",
        "如果想要像SAS Base一样，随时查看所有程序运行的日志结果也没问题。安装一个Notebook的SAS日志扩展组件就可以了。打开Anaconda Prompt，输入以下命令安装：\n",
        "\n",
        "``` python\n",
        "jupyter nbextension install --py sas_kernel.showSASLog\n",
        "```\n",
        "\n",
        "运行完毕后，输入以下命令启用SAS日志组件：\n",
        "\n",
        "``` python\n",
        "jupyter nbextension enable sas_kernel.showSASLog –py\n",
        "```\n",
        "\n",
        "## 连接SAS Server\n",
        "\n",
        "如果需要配置连接远程的SAS Server，如连接远程Windows机器的SAS Server，需在sascfg.py中做以下修改：\n",
        "\n",
        "1.  将SAS_config_names的值改为“wintowin”；\n",
        "\n",
        "2.  在wintowin连接方式中将参数iomhost的值修改为远程Windows机器的IP地址；将参数encoding的值修改为euc-cn；\n",
        "\n",
        "3.  将cpW中5个Jar包的路径修改为远程Windows机器中SAS对应的目录。\n",
        "\n",
        "修改完毕后，启动Notebook，首次运行SAS代码时，会提示输入访问SAS Server的有效SAS用户和密码。[^1]\n",
        "\n",
        "[^1]: [SAS岩论 \\| 在Jupyter Notebook中使用SAS](https://www.sohu.com/a/218339423_278472){.uri}\n",
        "\n",
        "## **典型生态项目**\n",
        "\n",
        "### **SASPy**\n",
        "\n",
        "SASPy 是一个 Python 库，允许你通过 Python 代码与 SAS 进行交互。SAS Kernel 依赖于 SASPy，因此在使用 SAS Kernel 之前，你需要配置 SASPy。\n",
        "\n",
        "### **JupyterLab 扩展**\n",
        "\n",
        "SAS Kernel 支持 JupyterLab 扩展，这些扩展可以提高你在 JupyterLab 中的编程效率。你可以通过以下命令安装这些扩展：\n",
        "\n",
        "``` python\n",
        "pip install sas_kernel[jlab_ext]\n",
        "```\n",
        "\n",
        "### **NBGrader**\n",
        "\n",
        "NBGrader 是一个用于分配和评分 Jupyter Notebook 的系统，它与 SAS Kernel 兼容。你可以使用 NBGrader 来创建和评分包含 SAS 代码的作业。\n",
        "\n",
        "通过这些生态项目，SAS Kernel 不仅扩展了 Jupyter Notebook 的功能，还增强了其在数据科学和分析领域的应用能力。[^2]\n",
        "\n",
        "[^2]: [SAS Kernel for Jupyter 安装与使用教程](https://blog.csdn.net/gitblog_01103/article/details/142273387?fromshare=blogdetail&sharetype=blogdetail&sharerId=142273387&sharerefer=PC&sharesource=&sharefrom=from_link){.uri}\n",
        "\n",
        "# Quarto 中使用 jupyter 调用 SASPy\n",
        "\n",
        "## idea？\n",
        "\n",
        "因为在jupyter中已经确定可以通过魔法命令来调用 Stata 和 SAS 的 engine 来实现 Pytho(jupyter) 和 Stata/SAS 的联合使用，但是 Quarto 中也可以直接使用 Python 的命令，实现的形式如下：\n",
        "\n",
        "## 实现\n",
        "\n",
        "这里首先按照基本的结构组装了一个程序，但是运行后报错\n"
      ],
      "id": "16c66c26"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: sas-quarto-test\n",
        "#| eval: false\n",
        "#| code-fold: false\n",
        "\n",
        "import saspy\n",
        "%load_ext saspy.sas_magic\n",
        "\n",
        "%%sas\n",
        "data iris;\n",
        "    set sashelp.iris;\n",
        "run;\n",
        "\n",
        "proc print data=iris(obs=10);\n",
        "run;"
      ],
      "id": "sas-quarto-test",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| eval: false\n",
        "#| code-fold: false\n",
        "\n",
        "Cell In[1], line 5\n",
        "    data iris;\n",
        "         ^\n",
        "SyntaxError: invalid syntax"
      ],
      "id": "79df860f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### 报错原因\n",
        "\n",
        "1.  %load_ext 是一个单行 cell magic，不能和 %%sas 混在同一个 cell 里;\n",
        "2.  %%sas 是 cell magic，它期望在 cell 顶部单独存在。\n",
        "3.  Quarto 里的一个 chunk 是一个 cell。这里把所有东西都写进一个 chunk，相当于写进了一个 Python cell，解释器会试图把 SAS 语句当作 Python 执行，自然就报错了。\n",
        "\n",
        "### 修改\n"
      ],
      "id": "0085baa0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "\n",
        "import saspy\n",
        "%load_ext saspy.sas_magic"
      ],
      "id": "6c3b31a4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "\n",
        "%%SAS\n",
        "proc print data=sashelp.iris(obs=10);\n",
        "run;"
      ],
      "id": "f966d011",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "顺利完成。\n",
        "\n",
        "## forward？\n",
        "\n",
        "由于在 `.ipynb` 文件中运行 SAS 程序后得到的 `.html` 文件在编译为网站后会出现“畸变”，改用 `.qmd` 后也许会有所改进。\n",
        "\n",
        "同时 `.qmd` 对一些文档控制之处的支持更为便捷，且可以插入文献和脚注，更适合作为专业的文档编辑工具。\n",
        "\n",
        "2025.07.07 实测，在 `.qmd` 中插入 SAS 程序运行后编译网页还是有“畸变”，暂时不清楚是由 `.qmd` 还是 `.ipynb` 引起。\n",
        "\n",
        "## 格式冲突修复尝试\n",
        "\n",
        "和 AI 多聊了一下这个问题，不是很好解决，涉及到不同的 html 格式版本和 html 格式的完整程度的不同，因为 Stata 输出的格式要干净许多，所以不会和 Quarto 的格式发生冲突，但是 SAS 不行。"
      ],
      "id": "606efe38"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\asus\\AppData\\Local\\Programs\\Python\\Python312\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}