{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Python introduction\"\n",
        "number-sections: false\n",
        "toc: false\n",
        "jupyter: python3\n",
        "execute:\n",
        "  echo: true      # 在输出中显示代码\n",
        "  eval: true      # 执行代码\n",
        "  warning: false  # 隐藏警告信息\n",
        "  message: false  # 隐藏消息\n",
        "---\n",
        "\n",
        "\n",
        "**Python**（英式发音：[/ˈpaɪθən/](https://zh.wikipedia.org/wiki/Help:%E8%8B%B1%E8%AA%9E%E5%9C%8B%E9%9A%9B%E9%9F%B3%E6%A8%99 \"Help:英语国际音标\")；美式发音：[/ˈpaɪθɑːn/](https://zh.wikipedia.org/wiki/Help:%E8%8B%B1%E8%AA%9E%E5%9C%8B%E9%9A%9B%E9%9F%B3%E6%A8%99 \"Help:英语国际音标\")），是一种广泛使用的[解释型](https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80 \"解释型语言\")、[高级](https://zh.wikipedia.org/wiki/%E9%AB%98%E7%B4%9A%E8%AA%9E%E8%A8%80 \"高级语言\")和[通用](https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80 \"通用编程语言\")的[编程语言](https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80 \"编程语言\")。Python支持多种编程范型，包括结构化、过程式、反射式、面向对象和函数式编程。它拥有[动态类型系统](https://zh.wikipedia.org/wiki/%E9%A1%9E%E5%9E%8B%E7%B3%BB%E7%B5%B1 \"类型系统\")和[垃圾回收](https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8) \"垃圾回收 (计算机科学)\")功能，能够自动管理内存使用，并且其本身拥有一个巨大而广泛的标准库。它的语言结构以及[面向对象](https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1 \"面向对象程序设计\")的方法，旨在帮助程序员为小型的和大型的项目编写逻辑清晰的代码。\n",
        "\n",
        "和Python结缘在2020年末，当时朋友正在学，我也跟着一起，跑了几个代码，做了几个图，但是没有啥应用计划，后来就没咋关注了。\n",
        "\n",
        "等毕了业，有感觉应该学一学，要是工作了也算有一个技能，于是又捡了起来，还行，随着理解力的提升，逐渐能掌握这一门语言了，当然，AI 的辅助也是功不可没。\n",
        "\n",
        "Python 的故事很多，关于它的内容在互联网可能看一年都看不完，全世界的人都在使用它，因此我这里也不做过多的赘述，显得很多余。\n",
        "\n",
        "使用Python的第一步，就是来一个电脑，当然没有电脑也行，因为可以用Google的 [Colab](https://colab.research.google.com/) ，挺好用，如果做机器学习，是一个很好的选择（当然是要开Pro）。\n",
        "\n",
        "然后安装，新手就安装普通的 Python 吧，先试试，来个编辑器，用 VS code、vim、pycharm 都可以，个人推荐用 VS code（这个也要学，没那么简单）。\n",
        "\n",
        "再然后学会 pip 安装包/库，创建一个文件 `.py` 开始运行。\n",
        "\n",
        "MOOC和B站上有很多教程，市面上的书也很多，选一本自己看得过去/感兴趣的。\n",
        "\n",
        "关于书的话，这些可以看看：\n",
        "\n",
        "-   **Python Cookbook 3rd**\n",
        "\n",
        "-   Python编程:从入门到实践\n",
        "\n",
        "-   Python基础教程 \n",
        "\n",
        "-   利用Python进行数据分析（做数据分析的可以着重看这一本）\n",
        "\n",
        "等逐渐熟悉Python了，可以用下 anaconda ，对环境的管理要好不少，且可以使用 spyder（神器，就是还不支持 AI）。\n",
        "\n",
        "画一个玫瑰作为碎碎念的收尾：\n"
      ],
      "id": "c7eb5e57"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#RoseDraw.py\n",
        "import turtle as t\n",
        "# 定义一个曲线绘制函数\n",
        "def DegreeCurve(n, r, d=1):\n",
        "    for i in range(n):\n",
        "        t.left(d)\n",
        "        t.circle(r, abs(d))\n",
        "# 初始位置设定\n",
        "s = 0.2 # size\n",
        "t.setup(450*5*s, 750*5*s)\n",
        "t.pencolor(\"black\")\n",
        "t.fillcolor(\"red\")\n",
        "t.speed(100)\n",
        "t.penup()\n",
        "t.goto(0, 900*s)\n",
        "t.pendown()\n",
        "# 绘制花朵形状\n",
        "t.begin_fill()\n",
        "t.circle(200*s,30)\n",
        "DegreeCurve(60, 50*s)\n",
        "t.circle(200*s,30)\n",
        "DegreeCurve(4, 100*s)\n",
        "t.circle(200*s,50)\n",
        "DegreeCurve(50, 50*s)\n",
        "t.circle(350*s,65)\n",
        "DegreeCurve(40, 70*s)\n",
        "t.circle(150*s,50)\n",
        "DegreeCurve(20, 50*s, -1)\n",
        "t.circle(400*s,60)\n",
        "DegreeCurve(18, 50*s)\n",
        "t.fd(250*s)\n",
        "t.right(150)\n",
        "t.circle(-500*s,12)\n",
        "t.left(140)\n",
        "t.circle(550*s,110)\n",
        "t.left(27)\n",
        "t.circle(650*s,100)\n",
        "t.left(130)\n",
        "t.circle(-300*s,20)\n",
        "t.right(123)\n",
        "t.circle(220*s,57)\n",
        "t.end_fill()\n",
        "# 绘制花枝形状\n",
        "t.left(120)\n",
        "t.fd(280*s)\n",
        "t.left(115)\n",
        "t.circle(300*s,33)\n",
        "t.left(180)\n",
        "t.circle(-300*s,33)\n",
        "DegreeCurve(70, 225*s, -1)\n",
        "t.circle(350*s,104)\n",
        "t.left(90)\n",
        "t.circle(200*s,105)\n",
        "t.circle(-500*s,63)\n",
        "t.penup()\n",
        "t.goto(170*s,-30*s)\n",
        "t.pendown()\n",
        "t.left(160)\n",
        "DegreeCurve(20, 2500*s)\n",
        "DegreeCurve(220, 250*s, -1)\n",
        "# 绘制一个绿色叶子\n",
        "t.fillcolor('green')\n",
        "t.penup()\n",
        "t.goto(670*s,-180*s)\n",
        "t.pendown()\n",
        "t.right(140)\n",
        "t.begin_fill()\n",
        "t.circle(300*s,120)\n",
        "t.left(60)\n",
        "t.circle(300*s,120)\n",
        "t.end_fill()\n",
        "t.penup()\n",
        "t.goto(180*s,-550*s)\n",
        "t.pendown()\n",
        "t.right(85)\n",
        "t.circle(600*s,40)\n",
        "# 绘制另一个绿色叶子\n",
        "t.penup()\n",
        "t.goto(-150*s,-1000*s)\n",
        "t.pendown()\n",
        "t.begin_fill()\n",
        "t.rt(120)\n",
        "t.circle(300*s,115)\n",
        "t.left(75)\n",
        "t.circle(300*s,100)\n",
        "t.end_fill()\n",
        "t.penup()\n",
        "t.goto(430*s,-1070*s)\n",
        "t.pendown()\n",
        "t.right(30)\n",
        "t.circle(-600*s,35)\n",
        "t.done()"
      ],
      "id": "1c0c3e35",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "end."
      ],
      "id": "a82c38e1"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\asus\\AppData\\Local\\Programs\\Python\\Python312\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}