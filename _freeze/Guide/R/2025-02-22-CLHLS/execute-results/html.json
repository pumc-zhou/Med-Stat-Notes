{
  "hash": "da7eef8a6ecf7e87bcfbc28509697740",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"CLHLS Data Analysis by R\"\nauthor: \"Simonzhou\"\ndate: \"2025-02-22\"\n#format: \n#  html:           # 输出格式为 HTML\n#    self-contained: true  # 生成独立的 HTML 文件\n#  pdf:            # 可选：如果需要 PDF 输出\n#    default\nexecute:\n  echo: true      # 在输出中显示代码\n  eval: true      # 执行代码\n  warning: false  # 隐藏警告信息\n  message: false  # 隐藏消息\n---\n\n\n\n\n# CLHLS 数据分析\n\n这是一个使用 R 语言对 CLHLS 数据进行清洗和分析的工作文档。\n\n## 加载必要的包\n\n\n\n\n\n\n\n\n\n本文数据源来自北大开放研究数据平台。[DVN/WBO7LK_2020](#DVN/WBO7LK_2020)\n\n使用 SAS 逐渐让我失去的耐心，极其臃肿和笨重，Vintage Car，交互页面也很糟糕，用起来很令人烦躁，遂改用 R 对数据进行分析。\n\n2025-03-06 R 也没那么好用，反而觉得 Stata 的简便也是一种优势所在。\n\n# 数据的导入与变量的生成\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. 导入数据\nraw_data <- read_sav(\"C:/Users/asus/Desktop/test/CLHLS/Analysis-0214/clhls_2018_15874.sav\")\n\n# 2. 检查数据结构（相当于proc contents）\nstr(raw_data)\n\n# 3. 选择变量并创建新变量\nselected_data <- raw_data %>%\n  mutate(\n    # 因变量\n    SHEALTH = ifelse(!b12 %in% c(NA, 8, 9), b12, NA),\n    \n    # ADL\n    ADLsum = rowSums(select(., e1:e6), na.rm = TRUE),\n    ADL = (ADLsum == 6),\n    \n    # IADL\n    IADLsum = rowSums(select(., e7:e14), na.rm = TRUE),\n    IADL = (IADLsum == 8),\n    \n    # 自变量 - 经济支持\n    economic_support = pmap_dbl(\n      list(f12a, f12b, f12c),\n      function(a, b, c) {\n        sum = 0\n        for (x in c(a, b, c)) {\n          if (!is.na(x)) {\n            if (x == 99998) sum = sum + 10000\n            else if (!x %in% c(88888, 99999)) sum = sum + x\n          }\n        }\n        return(sum)\n      }\n    ),\n    \n    # 照料支持\n    residence = a51,\n    living = a52,\n    visit_fren = apply(select(., starts_with(\"f103\") & ends_with(\"5\")), 1, \n                      function(x) max(x, na.rm = TRUE) == 1),\n    care_support = (residence == 1 | visit_fren),\n    \n    # 情感支持\n    emotion_support = apply(select(., starts_with(\"f103\") & ends_with(\"6\")), 1,\n                           function(x) max(x, na.rm = TRUE) == 1),\n    \n    # 控制变量\n    age = trueage,\n    gender = a1,\n    education = f1,\n    job_type = f2,\n    marriage_status = (f41 == 1),\n    hukou_type = hukou,\n    social_insurance = (nf64a == 0 | f64b == 1 | f64c == 1 | f64i == 1),\n    medical_insurance = (f64d == 1 | f64e == 1 | f64g == 1 | f64h == 1),\n    \n    # 慢性病\n    chronic_disease = apply(select(., starts_with(\"g15\") & ends_with(\"1\")), 1,\n                           function(x) max(x, na.rm = TRUE) == 1),\n    \n    smoking = g151,\n    drinking = g161,\n    exercise = (d91 == 1 | d92 == 1)\n  ) %>%\n  select(SHEALTH, ADL, ADLsum, IADL, IADLsum, economic_support, residence, living,\n         visit_fren, emotion_support, f10, age, gender, education, job_type,\n         marriage_status, hukou_type, social_insurance, medical_insurance,\n         chronic_disease, smoking, drinking, exercise, care_support)\n\n# 4. 样本筛选\ntemp_data <- selected_data %>%\n  filter(\n    complete.cases(SHEALTH, ADL, ADLsum, IADL, IADLsum, economic_support,\n                  residence, living, visit_fren, emotion_support, age, gender,\n                  education, job_type, marriage_status, hukou_type,\n                  social_insurance, medical_insurance, chronic_disease,\n                  smoking, drinking, exercise, care_support),\n    f10 > 0 & f10 <= 13\n  )\n\n# 5. 删除特定条件的样本\nfinal_data <- temp_data %>%\n  filter(\n    SHEALTH <= 8,\n    ADLsum <= 18,\n    IADLsum <= 24,\n    residence <= 3,\n    age >= 60,\n    education <= 22,\n    smoking <= 2,\n    drinking <= 2\n  )\n\n# 6. 年龄分组\nfinal_data_grouped <- final_data %>%\n  mutate(\n    age_group = case_when(\n      age < 70 ~ \"60-69\",\n      age < 80 ~ \"70-79\",\n      age < 90 ~ \"80-89\",\n      TRUE ~ \"90+\"\n    )\n  )\n\n# 7. 计算描述性统计量\nsummary_stats <- final_data_grouped %>%\n  summarise(across(\n    c(SHEALTH, ADL, ADLsum, IADL, IADLsum, economic_support, care_support,\n      emotion_support, age, gender, education, marriage_status, hukou_type,\n      social_insurance, medical_insurance, chronic_disease, smoking,\n      drinking, exercise),\n    list(\n      n = ~sum(!is.na(.)),\n      mean = ~mean(., na.rm = TRUE),\n      std = ~sd(., na.rm = TRUE),\n      min = ~min(., na.rm = TRUE),\n      median = ~median(., na.rm = TRUE),\n      max = ~max(., na.rm = TRUE)\n    )\n  )) %>%\n  pivot_longer(\n    everything(),\n    names_to = c(\"var_name\", \"stat\"),\n    names_sep = \"_\",\n    values_to = \"value\"\n  ) %>%\n  pivot_wider(\n    names_from = \"stat\",\n    values_from = \"value\"\n  )\n\n# 8. 创建变量标签映射\nlabel_map <- tibble(\n  var_name = c(\"SHEALTH\", \"ADL\", \"ADLsum\", \"IADL\", \"IADLsum\", \"economic_support\",\n              \"care_support\", \"emotion_support\", \"age\", \"gender\", \"education\",\n              \"marriage_status\", \"hukou_type\", \"social_insurance\",\n              \"medical_insurance\", \"chronic_disease\", \"smoking\", \"drinking\",\n              \"exercise\"),\n  label = c(\"自评健康状况\", \"生活自理能力\", \"生活自理能力总分\", \"工具型生活自理能力\",\n           \"工具型生活自理能力总分\", \"经济支持\", \"照料支持\", \"情感支持\", \"年龄\", \"性别\",\n           \"受教育程度\", \"婚姻状况\", \"户口类型\", \"养老保险\", \"医疗保险\", \"慢性病\",\n           \"抽烟\", \"喝酒\", \"体育锻炼\")\n)\n\n# 9. 合并结果\nfinal_summary <- summary_stats %>%\n  left_join(label_map, by = \"var_name\") %>%\n  select(label, n, mean, std, min, median, max)\n\n# 10. 查看结果\nprint(final_summary)\n\n# 11. 输出描述性统计表格\nlibrary(knitr)\nkable(final_summary,\n      digits = 3,\n      col.names = c(\"变量名\", \"样本数\", \"平均数\", \"标准差\", \"最小值\", \"中位数\", \"最大值\"),\n      caption = \"表3-1 描述性统计分析\")\n```\n:::\n\n\n\n\n## 数据导出\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(writexl)  \n# 12. 保存描述性统计表格  \nwrite_xlsx(final_summary, \"C:/Users/asus/Desktop/test/CLHLS/Analysis-0214/Rsummary0223.xlsx\")  \n# 13. 保存结果  \nwrite_xlsx(final_data, \"C:/Users/asus/Desktop/test/CLHLS/Analysis-0214/final_data0223.xlsx\")\n```\n:::\n\n\n\n\n## 描述性统计\n\n# 加载必要的包\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(knitr)\nlibrary(officer)\nlibrary(flextable)\nlibrary(car)\n\n# 确认包是否正确加载\nif (!require(officer)) stop(\"请安装 officer 包\")\nif (!require(flextable)) stop(\"请安装 flextable 包\")\nif (!require(dplyr)) stop(\"请安装 dplyr 包\")\n\n# 1. 导入数据\nfinal_data <- read_excel(\"C:/Users/asus/Desktop/test/CLHLS/Analysis-0214/final_data.xlsx\", \n                         sheet = \"final_data\")\n\n# 2. 定义变量列表（描述性统计用）\nvarlist <- c(\"SHEALTH\", \"ADLsum\", \"ADL\", \"IADLsum\", \"IADL\", \"economic_support\",\n             \"residence\", \"living\", \"visit_fren\", \"care_support\", \"emotion_support\",\n             \"age\", \"gender\", \"education\", \"job_type\", \"marriage_status\",\n             \"hukou_type\", \"social_insurance\", \"medical_insurance\", \"chronic_disease\",\n             \"smoking\", \"drinking\", \"exercise\", \"f10\")\n\n# 3. 创建变量标签映射\nlabel_map <- data.frame(\n  variable = varlist,\n  label = c(\"自评健康状况\", \"生活自理能力总分\", \"生活自理能力\", \"工具型生活自理能力总分\",\n            \"工具型生活自理能力\", \"经济支持\", \"居住情况\", \"居住状态\", \"探访频率\",\n            \"照料支持\", \"情感支持\", \"年龄\", \"性别\", \"受教育程度\", \"工作类型\",\n            \"婚姻状况\", \"户口类型\", \"社会保险\", \"医疗保险\", \"慢性病\",\n            \"吸烟情况\", \"饮酒情况\", \"体育锻炼\", \"子女数\")\n)\n\n# 4. 生成描述性统计\nsummary_stats <- final_data[ , varlist]\nsummary_stats <- summarise(summary_stats, across(\n  all_of(varlist),\n  list(\n    count = ~sum(!is.na(.)),\n    mean = ~mean(., na.rm = TRUE),\n    sd = ~sd(., na.rm = TRUE),\n    min = ~min(., na.rm = TRUE),\n    p50 = ~median(., na.rm = TRUE),\n    max = ~max(., na.rm = TRUE)\n  ),\n  .names = \"{.col}_{.fn}\"\n))\n\n# 调试：检查 summarise 后的数据\ncat(\"检查 summarise 后的数据:\\n\")\nprint(head(summary_stats))\ncat(\"检查 summarise 后的列类型:\\n\")\nprint(sapply(summary_stats, class))\n\n# 转换为长格式，修复分割问题\nsummary_stats <- pivot_longer(summary_stats, \n                              cols = everything(), \n                              names_to = c(\"variable\", \"stat\"), \n                              names_pattern = \"(.*)_(.*)\",  # 使用正则表达式匹配\n                              values_to = \"value\")\n\n# 调试：检查 pivot_longer 后的数据\ncat(\"检查 pivot_longer 后的数据:\\n\")\nprint(head(summary_stats, 10))\ncat(\"检查 pivot_longer 后的列类型:\\n\")\nprint(sapply(summary_stats, class))\n\n# 检查重复值\nduplicates <- summary_stats %>%\n  group_by(variable, stat) %>%\n  summarise(n = n()) %>%\n  filter(n > 1)\ncat(\"检查重复值:\\n\")\nprint(duplicates)\n\n# 转换为宽格式，确保唯一值\nsummary_stats <- pivot_wider(summary_stats, \n                             names_from = \"stat\", \n                             values_from = \"value\",\n                             values_fn = list(value = mean))  # 如果有重复，取均值\n\n# 调试：检查 pivot_wider 后的数据\ncat(\"检查 pivot_wider 后的数据:\\n\")\nprint(head(summary_stats))\ncat(\"检查 pivot_wider 后的列类型:\\n\")\nprint(sapply(summary_stats, class))\n\n# 合并标签并选择列\nsummary_stats <- left_join(summary_stats, label_map, by = \"variable\")\nsummary_stats <- select(summary_stats, label, count, mean, sd, min, p50, max)\n\n# 调试：检查合并后的数据\ncat(\"检查合并后的数据:\\n\")\nprint(head(summary_stats))\ncat(\"检查合并后的列类型:\\n\")\nprint(sapply(summary_stats, class))\n\n# 确保所有列为数值型并四舍五入\nsummary_stats <- mutate(summary_stats,\n                        count = as.numeric(count),\n                        mean = as.numeric(mean),\n                        sd = as.numeric(sd),\n                        min = as.numeric(min),\n                        p50 = as.numeric(p50),\n                        max = as.numeric(max))\nsummary_stats <- mutate(summary_stats, \n                        across(c(mean, sd, min, p50, max), ~round(., 2)))\n\n# 调试：检查最终数据\ncat(\"检查最终 summary_stats 数据:\\n\")\nprint(head(summary_stats))\ncat(\"检查最终 summary_stats 列类型:\\n\")\nprint(sapply(summary_stats, class))\n\n# 5. 在 R 窗口显示结果\ncat(\"直接打印 kable 表格:\\n\")\nprint(kable(summary_stats,\n            digits = 2,\n            col.names = c(\"变量名\", \"观测数\", \"均值\", \"标准差\", \"最小值\", \"中位数\", \"最大值\"),\n            caption = \"描述性统计\"))\n\n# 6. 导出描述性统计到 DOCX 文件\nstats_table <- flextable(summary_stats)\nstats_table <- set_header_labels(stats_table,\n                                 label = \"变量名\",\n                                 count = \"观测数\",\n                                 mean = \"均值\",\n                                 sd = \"标准差\",\n                                 min = \"最小值\",\n                                 p50 = \"中位数\",\n                                 max = \"最大值\")\nstats_table <- colformat_double(stats_table, j = 2:7, digits = 2)\nstats_table <- set_caption(stats_table, \"描述性统计\")\nstats_table <- autofit(stats_table)\n\ndoc <- read_docx()\ndoc <- body_add_flextable(doc, stats_table)\nprint(doc, target = \"C:/Users/asus/Desktop/test/CLHLS/Analysis-0214/描述性统计0218.docx\")\n\ncat(\"描述性统计已导出到 C:/Users/asus/Desktop/test/CLHLS/Analysis-0214/描述性统计0218.docx\\n\")\n\n# 后续代码保持不变（分组、频数表、ANOVA）\n# 7. 对年龄和教育进行分组\nfinal_data$age_group <- cut(final_data$age, breaks = c(60, 70, 80, 150), \n                            labels = c(\"60-69\", \"70-79\", \"80及以上\"), \n                            right = FALSE)\nfinal_data$edu_group <- cut(final_data$education, breaks = c(0, 1, 7, 10, 13, 18, 23),\n                            labels = c(\"无教育\", \"小学\", \"初中\", \"高中\", \"大学\", \"硕博\"), \n                            right = FALSE)\n\n# 8. 定义因变量和控制变量\noutcomes <- c(\"SHEALTH\", \"ADL\", \"IADL\")\ncontrols <- c(\"age_group\", \"gender\", \"edu_group\", \"marriage_status\", \"hukou_type\",\n              \"social_insurance\", \"medical_insurance\", \"chronic_disease\",\n              \"smoking\", \"drinking\", \"exercise\")\n\n# 9. 更新变量标签映射\nlabel_map <- rbind(label_map,\n                   data.frame(\n                     variable = c(\"age_group\", \"edu_group\"),\n                     label = c(\"年龄组\", \"教育组\")\n                   ))\n\n# 10. 生成所有控制变量的频数和占比表\nfreq_tables <- list()\nfor (ctrl in controls) {\n  freq_table <- group_by(final_data, !!sym(ctrl))\n  freq_table <- summarise(freq_table,\n                          freq = n(),\n                          pct = (n() / nrow(final_data)) * 100)\n  colnames(freq_table) <- c(label_map$label[label_map$variable == ctrl], \"频数\", \"占比 (%)\")\n  cat(\"\\n频数表 for\", ctrl, \":\\n\")\n  print(freq_table)\n  freq_tables[[ctrl]] <- freq_table\n}\n\n# 11. 单因素方差分析\nanova_results <- list()\nfor (outcome in outcomes) {\n  anova_results[[outcome]] <- data.frame()\n  \n  for (ctrl in controls) {\n    if (!is.numeric(final_data[[ctrl]])) {\n      final_data[[ctrl]] <- as.factor(final_data[[ctrl]])\n    }\n    \n    formula <- as.formula(paste(outcome, \"~\", ctrl))\n    anova_fit <- tryCatch({\n      fit <- aov(formula, data = final_data)\n      summary_fit <- summary(fit)[[1]]\n      result <- data.frame(\n        \"控制变量\" = label_map$label[label_map$variable == ctrl],\n        \"平方和\" = summary_fit$\"Sum Sq\"[1],\n        \"自由度\" = summary_fit$\"Df\"[1],\n        \"F 值\" = summary_fit$\"F value\"[1],\n        \"p 值\" = summary_fit$\"Pr(>F)\"[1]\n      )\n      cat(\"\\nANOVA:\", outcome, \"vs\", ctrl, \"\\n\")\n      print(result)\n      result\n    }, error = function(e) {\n      message(paste(\"ANOVA 失败:\", outcome, \"vs\", ctrl, \"错误:\", e$message))\n      return(data.frame(\n        \"控制变量\" = label_map$label[label_map$variable == ctrl],\n        \"平方和\" = NA,\n        \"自由度\" = NA,\n        \"F 值\" = NA,\n        \"p 值\" = NA\n      ))\n    })\n    \n    anova_results[[outcome]] <- rbind(anova_results[[outcome]], anova_fit)\n  }\n}\n\n# 12. 创建 Word 文档并输出结果\ndoc <- read_docx()\n\n# 添加所有控制变量的频数和占比表\ndoc <- body_add_par(doc, \"控制变量的频数和占比表\", style = \"heading 1\")\nfor (ctrl in controls) {\n  freq_table <- freq_tables[[ctrl]]\n  if (nrow(freq_table) > 0) {\n    freq_ft <- flextable(freq_table)\n    freq_ft <- colformat_double(freq_ft, j = 2, digits = 0)\n    freq_ft <- colformat_double(freq_ft, j = 3, digits = 2)\n    freq_ft <- autofit(freq_ft)\n    doc <- body_add_par(doc, paste(\"变量:\", label_map$label[label_map$variable == ctrl]), style = \"heading 2\")\n    doc <- body_add_flextable(doc, freq_ft)\n  } else {\n    cat(\"警告: 频数表为空 -\", ctrl, \"\\n\")\n  }\n}\n\n# 添加 ANOVA 结果\ndoc <- body_add_par(doc, \"单因素方差分析结果\", style = \"heading 1\")\nfor (outcome in outcomes) {\n  anova_table <- anova_results[[outcome]]\n  if (nrow(anova_table) > 0) {\n    anova_ft <- flextable(anova_table)\n    anova_ft <- colformat_double(anova_ft, j = 2, digits = 2)\n    anova_ft <- colformat_double(anova_ft, j = 3, digits = 0)\n    anova_ft <- colformat_double(anova_ft, j = 4, digits = 2)\n    anova_ft <- colformat_double(anova_ft, j = 5, digits = 3)\n    anova_ft <- autofit(anova_ft)\n    doc <- body_add_par(doc, paste(\"因变量:\", label_map$label[label_map$variable == outcome], \"的单因素方差分析\"), style = \"heading 2\")\n    doc <- body_add_par(doc, paste(\"ANOVA 结果表 -\", label_map$label[label_map$variable == outcome]))\n    doc <- body_add_flextable(doc, anova_ft)\n  } else {\n    cat(\"警告: ANOVA 结果表为空 -\", outcome, \"\\n\")\n  }\n}\n\n# 保存文档\nprint(doc, target = \"C:/Users/asus/Desktop/test/CLHLS/Analysis-0214/anova_results0223.docx\")\n\ncat(\"单因素方差分析结果已导出到 C:/Users/asus/Desktop/test/CLHLS/Analysis-0214/anova_results0223.docx\\n\")\n```\n:::\n\n\n\n\n## 构建Logistic回归模型\n\nLogistic 回归分析最大的一个优势可能就是广泛涉及优势比（？），在这里介绍一下优势比的概念。\n\n### 优势比\n\n优势（Odds）是指某事件的发生概率 $\\pi$ 与该事件不发生的概率 $1-\\pi$ 之比，亦称为比，记为 *Odds* ，某事件在两种不同条件下的优势之比称为优势比（Odds Ratio，OR）。优势比在流行病学中的病例对照研究中被普遍应用（当然不仅限于病例对照研究）。\n\n设某事件的两种不同暴露的发生概率分别为 $\\pi_1$ 和 $\\pi_0$ ，对应的 $Odds_1= \\pi_1 /（1-\\pi_1）$，$Odds_0 =\\pi_0 /（1-\\pi_0）$ ，两个 $Odds$ 之比定义为 $OR=Odds_1/Odds_0$。\n\n由于 $Odds=\\pi /(1-\\pi)=(\\pi-1+1)/(1-\\pi)=－1+1 /(1-\\pi)$ 以及 $0＜ \\pi ＜1$，所以 $\\pi$ 越大，$Odds$ 就越大，反之 $\\pi$ 越小，$Odds$ 就越小，特別当 $\\pi$ 越接近0时，$Odds$ 也越接近0，因此优势和优势比具有下列性质。\n\n- 如果$\\pi_1 = \\pi_0$。，对应有$ Odds_1=Odds_0$ , $OR=1$ 。\n- 如果 $\\pi_1>\\pi_0$ ，则 $Odds_1>Odds_o$ ，相应有$ OR>1$ 。同理如果$\\pi_1<\\pi_0$，则 $Odds_1<Odds_0$ ，相应有 $OR < 1$。\n\n由于概率 $\\pi_1$ 也可以用 $Odds$ 表示，$\\pi=\\frac{Odds}{1+Odds}$ ，所以也可以通过比较 $Odds_1$ 与 $Odds_0$ 的大小来推断$\\pi_1$ 和 $\\pi_0$的大小关系，即可以用$OR>1$, $OR=1$ 或 $OR<1$ 推断 $\\pi_1$ 和 $\\pi_0$ 的大小关系。\n\n### Logistic 回归模型\n\nLogistic 回归模型的因变量必须为分类变量，主要有三种：二分类 Logistic 回归模型、有序分类 Logistic 回归模型、无序分类 Logistic 回归模型。其中二分类 Logistic 回归模型最为常用。自变量则无要求，可以是定量变量、有序分类变量和无序分类变量。\n\n假如研究所关注的事件（如死亡或痊愈等）是否发生用因变量 $Y$ 表示，$Y=1$ 表示该结局事件发生，反之，$Y=0$ 表示该结局事件未发生。\n\n那么可构建如下方程式：\n\n$$logit(\\pi(Y=1))=ln\\frac{\\pi(Y=1)}{\\pi(Y=0)}=ln\\frac{\\pi(Y=1)}{1-\\pi(Y=1)}=\\beta_0 + \\beta_1 X_1 + \\cdot \\beta_p X_p$$\n\n### 共线性检验\n\n共线性(Colinearity)指的是自变量之间存在高度相关性。这种情况会导致回归系数的不稳定，并使得对模型参数\n的估计变得不可靠。在 Logistic 回归中，严重的共线性可能导致模型性能下降，甚至可能导致预测结果难以解释\n\n方差膨胀因子是统计学中用于衡量多元线性回归模型中自变量之间共线性程度的指标，提供了一种定量的方式来评估自变量之间的共线性。\n\n方差膨胀因子的解释标准通常如下：如果VIF值小于5，表示自变量之间的共线性程度较低，可以接受。如果VIF值在5到10之间，\n表示自变量之间存在一定程度的共线性，但尚可接受。如果VIF值大于10，表示自变量之间存在严重的共线性问题，\n需要考虑进行变量选择或者采取其他方法来处理共线性。\n\n自评健康作为 因变量 ，自变量是 经济支持、生活支持和情绪支持，在前序的处理过程，只有原始的的经济支持变量（加总金额）是定量变量，其他两个都是做的二分类变量处理，如何做共线性检验，看起来并不明朗，因为三个变量看起来没有太多的关系，但是控制变量有些可能存在相关性，但是\n是否有对控制变量做共线性检验的必要？",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}