pacman::p_load(readxl, dplyr, tidyr, car, writexl)
# 定义文件路径
base_path <- "C:/Users/asus/Desktop/test/CLHLS/Analysis-0301/"
data_file <- paste0(base_path, "final_data.xlsx")
output_vif_file <- paste0(base_path, "vif_results0307.txt")
output_vif_excel <- paste0(base_path, "vif_results0307.xlsx")
output_logistic_file <- paste0(base_path, "logistic_analysis_results0307.docx")
# 导入数据
final_data <- read_excel(data_file, sheet = "final_data") %>%
filter(hukou_type == 2)  # 仅筛选户口类型为农村
# 变量定义
outcome <- "SHEALTH"  # 因变量
dependent_vars <- c("residence", "economic_support_group", "visit_fren", "care_support", "emotion_support")
controls <- c("age_group", "gender", "edu_group", "marriage_status","job_type",
"social_insurance", "medical_insurance", "chronic_disease",
"smoking", "drinking", "exercise")
all_predictors <- c(dependent_vars, controls)
# 修改部分变量赋值并处理 economic_support 分组
final_data <- final_data %>%
mutate(
gender = ifelse(gender == 2, 0, gender),
smoking = ifelse(smoking == 2, 0, smoking),
drinking = ifelse(drinking == 2, 0, drinking),
#residence = as.factor(residence),
age_group = as.numeric(cut(age, breaks = c(60, 70, 80, 150), labels = c(0, 1, 2), right = FALSE)),
edu_group = as.numeric(cut(education, breaks = c(0, 1, 7, 13, 23), labels = c(0, 1, 2, 3), right = FALSE)),
economic_support_ln = log(economic_support + 1),
economic_support_group = ifelse(economic_support == 0, "0",
cut(economic_support,
breaks = c(0, 5000, 10000, Inf),
labels = c("1", "2", "3"),
right = FALSE))
)
# 数据完整性检查，删除全NA和单一值变量
valid_vars <- all_predictors[sapply(final_data[, all_predictors, drop = FALSE], function(x) !(all(is.na(x)) || length(unique(na.omit(x))) == 1))]
final_data <- final_data[, c(outcome, valid_vars)]
# 仅将二分类变量转换为因子类型
binary_vars <- valid_vars[sapply(final_data[, valid_vars], function(x) length(unique(na.omit(x))) == 2)]
final_data <- final_data %>% mutate(across(all_of(binary_vars), as.factor))
# VIF计算
if (length(valid_vars) > 1) {
formula_vif <- as.formula(paste(outcome, "~", paste(valid_vars, collapse = " + ")))
lm_model <- lm(formula_vif, data = final_data)
vif_values <- vif(lm_model)
vif_df <- data.frame(
Variable = names(vif_values),
VIF = round(vif_values, 3)
)
mean_vif <- mean(vif_values, na.rm = TRUE)
# 结果保留两位小数
mean_vif <- round(mean_vif, 3)
# 保存结果
writeLines(c("=== 多重共线性检验 (VIF Results) ===",
paste("平均 VIF 值:", round(mean_vif, 3)), "",
capture.output(print(vif_df))), con = output_vif_file)
write_xlsx(list(VIF_Results = vif_df, Mean_VIF = data.frame(Statistic = "平均 VIF 值", Value = round(mean_vif, 3))),
output_vif_excel)
cat("VIF 检验完成，结果已保存至:", output_vif_file, "和", output_vif_excel, "\n")
} else {
cat("错误：自变量数量不足，无法计算 VIF\n")
}
# 5. Logistic 回归分析
logistic_results <- list()
for (outcome in outcomes) {
formula <- as.formula(
paste(outcome, "~", paste(independents, collapse = " + "), "+", paste(controls, collapse = " + "))
)
model <- glm(formula, data = final_data, family = binomial(link = "logit"))
# 提取回归结果，保留三位小数
model_summary <- summary(model)
coef_table <- as.data.frame(coef(model_summary)) %>%
mutate(
Variable = rownames(.),
OR = round(exp(Estimate), 3),
OR_Lower = round(exp(Estimate - 1.96 * `Std. Error`), 3),
OR_Upper = round(exp(Estimate + 1.96 * `Std. Error`), 3),
`Wald χ²` = round((Estimate / `Std. Error`)^2, 3),
df = 1
) %>%
select(Variable, df, Estimate, `Std. Error`, `Wald χ²`, `Pr(>|z|)`, OR, OR_Lower, OR_Upper) %>%
rename(
`回归系数` = Estimate,
`标准误` = `Std. Error`,
`P 值` = `Pr(>|z|)`
) %>%
mutate(across(c(`回归系数`, `标准误`, `P 值`), ~ round(.x, 3)))
logistic_results[[outcome]] <- coef_table
}
# 0305 Logistic Regression with Collinearity Check
# 加载必要的包
if (!require(pacman)) install.packages("pacman")
pacman::p_load(readxl, dplyr, tidyr, broom, knitr, officer, flextable, car)
# 定义文件路径
base_path <- "C:/Users/asus/Desktop/test/CLHLS/Analysis-0301/"
data_file <- paste0(base_path, "final_data.xlsx")
output_logistic_file <- paste0(base_path, "logistic_analysis_results0305.docx")
output_vif_file <- paste0(base_path, "vif_results0305.txt")
# 1. 导入数据并筛选农村户口类型
final_data <- tryCatch({
read_excel(data_file, sheet = "final_data")
}, error = function(e) {
stop("数据导入失败: ", e$message)
})
final_data <- final_data %>% filter(hukou_type == 2)
cat("筛选户口类型后的样本量：", nrow(final_data), "\n")
# 2. 变量定义
outcomes <- c("SHEALTH", "ADL", "IADL")  # 因变量
controls <- c("age_group", "gender", "edu_group", "marriage_status",
"social_insurance", "medical_insurance", "chronic_disease",
"smoking", "drinking", "exercise")  # 控制变量
independents <- c("residence", "living", "visit_fren", "care_support",
"emotion_support", "economic_support_group")  # 自变量
all_predictors <- c(independents, controls)  # 用于共线性检验的所有自变量
# 3. 变量转换
final_data <- final_data %>%
mutate(
SHEALTH = ifelse(SHEALTH %in% c(1, 2, 3), 1, ifelse(SHEALTH %in% c(4, 5), 0, NA)),
gender = ifelse(gender == 2, 0, gender),
smoking = ifelse(smoking == 2, 0, smoking),
drinking = ifelse(drinking == 2, 0, drinking),
age_group = as.numeric(cut(age, breaks = c(60, 70, 80, 150), labels = c(0, 1, 2), right = FALSE)),
edu_group = as.numeric(cut(education, breaks = c(0, 1, 7, 13, 23), labels = c(0, 1, 2, 3), right = FALSE)),
economic_support_group = as.numeric(cut(economic_support, breaks = c(-Inf, 0, 5000, 10000, Inf),
labels = c("0", "1", "2", "3"), right = FALSE))
) %>%
na.omit()  # 删除缺失值以确保模型和 VIF 计算的稳定性
# 5. Logistic 回归分析
logistic_results <- list()
for (outcome in outcomes) {
formula <- as.formula(
paste(outcome, "~", paste(independents, collapse = " + "), "+", paste(controls, collapse = " + "))
)
model <- glm(formula, data = final_data, family = binomial(link = "logit"))
# 提取回归结果，保留三位小数
model_summary <- summary(model)
coef_table <- as.data.frame(coef(model_summary)) %>%
mutate(
Variable = rownames(.),
OR = round(exp(Estimate), 3),
OR_Lower = round(exp(Estimate - 1.96 * `Std. Error`), 3),
OR_Upper = round(exp(Estimate + 1.96 * `Std. Error`), 3),
`Wald χ²` = round((Estimate / `Std. Error`)^2, 3),
df = 1
) %>%
select(Variable, df, Estimate, `Std. Error`, `Wald χ²`, `Pr(>|z|)`, OR, OR_Lower, OR_Upper) %>%
rename(
`回归系数` = Estimate,
`标准误` = `Std. Error`,
`P 值` = `Pr(>|z|)`
) %>%
mutate(across(c(`回归系数`, `标准误`, `P 值`), ~ round(.x, 3)))
logistic_results[[outcome]] <- coef_table
}
# 6. 生成 Word 文档
doc <- read_docx()
for (outcome in outcomes) {
doc <- doc %>%
body_add_par(value = paste("Logistic 回归分析结果：因变量 =", outcome), style = "heading 1") %>%
body_add_flextable(flextable(logistic_results[[outcome]]) %>%
set_table_properties(width = 1, layout = "autofit"))
}
print(doc, target = output_logistic_file)
# 0305 Logistic Regression with Collinearity Check
# 加载必要的包
if (!require(pacman)) install.packages("pacman")
pacman::p_load(readxl, dplyr, tidyr, broom, knitr, officer, flextable, car)
# 定义文件路径
base_path <- "C:/Users/asus/Desktop/test/CLHLS/Analysis-0301/"
data_file <- paste0(base_path, "final_data.xlsx")
output_logistic_file <- paste0(base_path, "logistic_analysis_results0375.docx")
output_vif_file <- paste0(base_path, "vif_results0305.txt")
# 1. 导入数据并筛选农村户口类型
final_data <- tryCatch({
read_excel(data_file, sheet = "final_data")
}, error = function(e) {
stop("数据导入失败: ", e$message)
})
final_data <- final_data %>% filter(hukou_type == 2)
cat("筛选户口类型后的样本量：", nrow(final_data), "\n")
# 2. 变量定义
outcomes <- c("SHEALTH", "ADL", "IADL")  # 因变量
controls <- c("age_group", "gender", "edu_group", "marriage_status",
"social_insurance", "medical_insurance", "chronic_disease",
"smoking", "drinking", "exercise")  # 控制变量
independents <- c("residence", "living", "visit_fren", "care_support",
"emotion_support", "economic_support_group")  # 自变量
all_predictors <- c(independents, controls)  # 用于共线性检验的所有自变量
# 3. 变量转换
final_data <- final_data %>%
mutate(
SHEALTH = ifelse(SHEALTH %in% c(1, 2, 3), 1, ifelse(SHEALTH %in% c(4, 5), 0, NA)),
gender = ifelse(gender == 2, 0, gender),
smoking = ifelse(smoking == 2, 0, smoking),
drinking = ifelse(drinking == 2, 0, drinking),
age_group = as.numeric(cut(age, breaks = c(60, 70, 80, 150), labels = c(0, 1, 2), right = FALSE)),
edu_group = as.numeric(cut(education, breaks = c(0, 1, 7, 13, 23), labels = c(0, 1, 2, 3), right = FALSE)),
economic_support_group = as.numeric(cut(economic_support, breaks = c(-Inf, 0, 5000, 10000, Inf),
labels = c("0", "1", "2", "3"), right = FALSE))
) %>%
na.omit()  # 删除缺失值以确保模型和 VIF 计算的稳定性
# 5. Logistic 回归分析
logistic_results <- list()
for (outcome in outcomes) {
formula <- as.formula(
paste(outcome, "~", paste(independents, collapse = " + "), "+", paste(controls, collapse = " + "))
)
model <- glm(formula, data = final_data, family = binomial(link = "logit"))
# 提取回归结果，保留三位小数
model_summary <- summary(model)
coef_table <- as.data.frame(coef(model_summary)) %>%
mutate(
Variable = rownames(.),
OR = round(exp(Estimate), 3),
OR_Lower = round(exp(Estimate - 1.96 * `Std. Error`), 3),
OR_Upper = round(exp(Estimate + 1.96 * `Std. Error`), 3),
`Wald χ²` = round((Estimate / `Std. Error`)^2, 3),
df = 1
) %>%
select(Variable, df, Estimate, `Std. Error`, `Wald χ²`, `Pr(>|z|)`, OR, OR_Lower, OR_Upper) %>%
rename(
`回归系数` = Estimate,
`标准误` = `Std. Error`,
`P 值` = `Pr(>|z|)`
) %>%
mutate(across(c(`回归系数`, `标准误`, `P 值`), ~ round(.x, 3)))
logistic_results[[outcome]] <- coef_table
}
# 6. 生成 Word 文档
doc <- read_docx()
for (outcome in outcomes) {
doc <- doc %>%
body_add_par(value = paste("Logistic 回归分析结果：因变量 =", outcome), style = "heading 1") %>%
body_add_flextable(flextable(logistic_results[[outcome]]) %>%
set_table_properties(width = 1, layout = "autofit"))
}
print(doc, target = output_logistic_file)
cat("Logistic 回归分析结果已保存至:", output_logistic_file, "\n")
# 0305 Logistic Regression with Collinearity Check
# 加载必要的包
if (!require(pacman)) install.packages("pacman")
pacman::p_load(readxl, dplyr, tidyr, broom, knitr, officer, flextable, car)
# 定义文件路径
base_path <- "C:/Users/asus/Desktop/test/CLHLS/Analysis-0301/"
data_file <- paste0(base_path, "final_data.xlsx")
output_logistic_file <- paste0(base_path, "logistic_analysis_results0375.docx")
output_vif_file <- paste0(base_path, "vif_results0305.txt")
# 1. 导入数据并筛选农村户口类型
final_data <- tryCatch({
read_excel(data_file, sheet = "final_data")
}, error = function(e) {
stop("数据导入失败: ", e$message)
})
final_data <- final_data %>% filter(hukou_type == 2)
cat("筛选户口类型后的样本量：", nrow(final_data), "\n")
# 2. 变量定义
outcomes <- c("SHEALTH", "ADL", "IADL")  # 因变量
controls <- c("age_group", "gender", "edu_group", "marriage_status", "job_type",
"social_insurance", "medical_insurance", "chronic_disease",
"smoking", "drinking", "exercise")  # 控制变量
independents <- c("residence", "visit_fren", "care_support",
"emotion_support", "economic_support_group")  # 自变量
all_predictors <- c(independents, controls)  # 用于共线性检验的所有自变量
# 3. 变量转换
final_data <- final_data %>%
mutate(
SHEALTH = ifelse(SHEALTH %in% c(1, 2, 3), 1, ifelse(SHEALTH %in% c(4, 5), 0, NA)),
gender = ifelse(gender == 2, 0, gender),
smoking = ifelse(smoking == 2, 0, smoking),
drinking = ifelse(drinking == 2, 0, drinking),
age_group = as.numeric(cut(age, breaks = c(60, 70, 80, 150), labels = c(0, 1, 2), right = FALSE)),
edu_group = as.numeric(cut(education, breaks = c(0, 1, 7, 13, 23), labels = c(0, 1, 2, 3), right = FALSE)),
economic_support_group = as.numeric(cut(economic_support, breaks = c(-Inf, 0, 5000, 10000, Inf),
labels = c("0", "1", "2", "3"), right = FALSE))
) %>%
na.omit()  # 删除缺失值以确保模型和 VIF 计算的稳定性
# 5. Logistic 回归分析
logistic_results <- list()
for (outcome in outcomes) {
formula <- as.formula(
paste(outcome, "~", paste(independents, collapse = " + "), "+", paste(controls, collapse = " + "))
)
model <- glm(formula, data = final_data, family = binomial(link = "logit"))
# 提取回归结果，保留三位小数
model_summary <- summary(model)
coef_table <- as.data.frame(coef(model_summary)) %>%
mutate(
Variable = rownames(.),
OR = round(exp(Estimate), 3),
OR_Lower = round(exp(Estimate - 1.96 * `Std. Error`), 3),
OR_Upper = round(exp(Estimate + 1.96 * `Std. Error`), 3),
`Wald χ²` = round((Estimate / `Std. Error`)^2, 3),
df = 1
) %>%
select(Variable, df, Estimate, `Std. Error`, `Wald χ²`, `Pr(>|z|)`, OR, OR_Lower, OR_Upper) %>%
rename(
`回归系数` = Estimate,
`标准误` = `Std. Error`,
`P 值` = `Pr(>|z|)`
) %>%
mutate(across(c(`回归系数`, `标准误`, `P 值`), ~ round(.x, 3)))
logistic_results[[outcome]] <- coef_table
}
# 6. 生成 Word 文档
doc <- read_docx()
for (outcome in outcomes) {
doc <- doc %>%
body_add_par(value = paste("Logistic 回归分析结果：因变量 =", outcome), style = "heading 1") %>%
body_add_flextable(flextable(logistic_results[[outcome]]) %>%
set_table_properties(width = 1, layout = "autofit"))
}
print(doc, target = output_logistic_file)
cat("Logistic 回归分析结果已保存至:", output_logistic_file, "\n")
library(tidyverse)
library(sf)
library(terra)
library(units)
light <- rast("夜光数据.tif")
ovarian
install.packages("survival")
ovarian
library(survival)
ovarian
data(cancer, package="survival")
force(ovarian)
View(ovarian)
df <- ovarian
write.csv(df, "C:\Users\asus\Desktop\R\quarto\Med-Stat-Notes\Data\ovarian.csv", row.names = FALSE)
df <- ovarian
write.csv(df, "C:\\Users\\asus\\Desktop\\R\\quarto\\Med-Stat-Notes\\Data\\ovarian.csv", row.names = FALSE)
install.packages(c("survival", "survminer"))
# Load the packages
library("survival")
library("survminer")
data("lung")
head(lung)
# Fit a survival model
fit <- survfit(Surv(time, status) ~ sex, data = lung)
print(fit)
# Summary of survival curves
summary(fit)
# Access to the sort summary table
summary(fit)$table
d <- data.frame(time = fit$time,
n.risk = fit$n.risk,
n.event = fit$n.event,
n.censor = fit$n.censor,
surv = fit$surv,
upper = fit$upper,
lower = fit$lower
)
head(d)
# Plot survival curves
# Change color, linetype by strata, risk.table color by strata
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
install.packages(c("survival", "survminer"))
# Load the packages
library("survival")
library("survminer")
data("lung")
head(lung)
# Fit a survival model
fit <- survfit(Surv(time, status) ~ sex, data = lung)
print(fit)
# Summary of survival curves
summary(fit)
# Access to the sort summary table
summary(fit)$table
d <- data.frame(time = fit$time,
n.risk = fit$n.risk,
n.event = fit$n.event,
n.censor = fit$n.censor,
surv = fit$surv,
upper = fit$upper,
lower = fit$lower
)
head(d)
# Plot survival curves
# Change color, linetype by strata, risk.table color by strata
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
# Change the order of legend
ggsurvplot(
fit,                     # survfit object with calculated statistics.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimaes of survival curves.
conf.int.style = "step",  # customize style of confidence intervals
xlab = "Time in days",   # customize X axis label.
break.time.by = 200,     # break X axis in time intervals by 200.
ggtheme = theme_light(), # customize plot and risk table with a theme.
risk.table = "abs_pct",  # absolute number and percentage at risk.
risk.table.y.text.col = T,# colour risk table text annotations.
risk.table.y.text = FALSE,# show bars instead of names in text annotations
# in legend of risk table.
ncensor.plot = TRUE,      # plot the number of censored subjects at time t
surv.median.line = "hv",  # add the median survival pointer.
legend.labs =
c("Male", "Female"),    # change legend labels.
palette =
c("#E7B800", "#2E9FDF") # custom color palettes.
)
summary(fit)$table
ggsurvplot(fit,
conf.int = TRUE,
risk.table.col = "strata", # Change risk table color by groups
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0, 600))
install.packages(c("survival", "survminer"))
# Load the packages
library("survival")
library("survminer")
data("lung")
head(lung)
# Fit a survival model
fit <- survfit(Surv(time, status) ~ sex, data = lung)
print(fit)
# Summary of survival curves
summary(fit)
# Access to the sort summary table
summary(fit)$table
d <- data.frame(time = fit$time,
n.risk = fit$n.risk,
n.event = fit$n.event,
n.censor = fit$n.censor,
surv = fit$surv,
upper = fit$upper,
lower = fit$lower
)
head(d)
# Plot survival curves
# Change color, linetype by strata, risk.table color by strata
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
# Change the order of legend
ggsurvplot(
fit,                     # survfit object with calculated statistics.
pval = TRUE,             # show p-value of log-rank test.
conf.int = TRUE,         # show confidence intervals for
# point estimaes of survival curves.
conf.int.style = "step",  # customize style of confidence intervals
xlab = "Time in days",   # customize X axis label.
break.time.by = 200,     # break X axis in time intervals by 200.
ggtheme = theme_light(), # customize plot and risk table with a theme.
risk.table = "abs_pct",  # absolute number and percentage at risk.
risk.table.y.text.col = T,# colour risk table text annotations.
risk.table.y.text = FALSE,# show bars instead of names in text annotations
# in legend of risk table.
ncensor.plot = TRUE,      # plot the number of censored subjects at time t
surv.median.line = "hv",  # add the median survival pointer.
legend.labs =
c("Male", "Female"),    # change legend labels.
palette =
c("#E7B800", "#2E9FDF") # custom color palettes.
)
summary(fit)$table
ggsurvplot(fit,
conf.int = TRUE,
risk.table.col = "strata", # Change risk table color by groups
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0, 600))
ggsurvplot(fit,
conf.int = TRUE,
risk.table.col = "strata", # Change risk table color by groups
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"),
fun = "event")
ggsurvplot(fit,
conf.int = TRUE,
risk.table.col = "strata", # Change risk table color by groups
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"),
fun = "cumhaz")
summary(fit)
res.sum <- surv_summary(fit)
head(res.sum)
attr(res.sum, "table")
surv_diff <- survdiff(Surv(time, status) ~ sex, data = lung)
surv_diff
# Fit (complex) survival curves using colon data sets
require("survival")
fit2 <- survfit( Surv(time, status) ~ sex + rx + adhere,
data = colon )
# Visualize the output using survminer. The plot below shows survival curves by the sex variable faceted according to the values of rx & adhere.
# Plot survival curves by sex and facet by rx and adhere
ggsurv <- ggsurvplot(fit2, fun = "event", conf.int = TRUE,
ggtheme = theme_bw())
ggsurv$plot +theme_bw() +
theme (legend.position = "right")+
facet_grid(rx ~ adhere)
setwd("C:/Users/asus/Desktop/R/quarto/Med-Stat-Notes")
bookdown:::serve_book()
